buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'pl.allegro.tech.build:axion-release-plugin:0.9.5'
    }
}

apply plugin: 'axion-release'

scmVersion {
    tag {
        prefix = 'javers'
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'signing'
    apply plugin: 'propdeps'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    project.group = 'org.javers'
    project.version = scmVersion.version

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile "org.spockframework:spock-core:$spockVersion"
        testCompile 'org.apache.commons:commons-lang3:3.3.2'
        testCompile 'ch.qos.logback:logback-classic:1.1.2'
        testCompile 'cglib:cglib-nodep:3.2.0'
        testCompile 'org.objenesis:objenesis:2.1'
        testCompile 'org.easytesting:fest-assert-core:2.0M10'
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.10'
    }

    javadoc {
        options.noTimestamp()
    }

    task example (dependsOn: 'cleanTest') << {
        tasks.test.testLogging {
            events 'failed', 'passed'
            showStandardStreams = true
        }
        tasks.test.execute()
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourceJar
    }

    //disable javadoc doclint for Java8
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                def username = project.ext.has('sonatypeUser') ? project.ext.sonatypeUser : ''
                def password = project.ext.has('sonatypePassword') ? project.ext.sonatypePassword : ''

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: username, password: password)
                }

                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: username, password: password)
                }

                /*addFilter('javers-core') {artifact, file ->
                    artifact.name == 'javers-core'
                }
                addFilter('javers-persistence-mongo') {artifact, file ->
                    artifact.name == 'javers-persistence-mongo'
                }
                addFilter('javers-spring') {artifact, file ->
                    artifact.name == 'javers-spring'
                }*/

                pom.project {
                    name 'javers-parent'

                    packaging 'jar'

                    description 'JaVers object auditing and diff framework'
                    url 'http://javers.org'
                    inceptionYear '2013'

                    scm {
                        connection 'scm:git:https://github.com/javers/javers.git'
                        url 'https://github.com/javers/javers'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'Bartosz Walacik'
                        }
                        developer {
                            name 'Pawel Szymczyk'
                        }
                    }

                }
            }
        }
    }
}