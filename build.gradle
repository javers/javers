buildscript {
    repositories {
        mavenCentral()
        jcenter()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'org.owasp:dependency-check-gradle:3.1.2'
        classpath 'com.adarshr:gradle-test-logger-plugin:2.0.0'
     }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.1'
    id 'io.codearte.nexus-staging' version '0.21.2'
    id 'de.marcphilipp.nexus-publish' version '0.2.0' apply false
    id 'com.adarshr.test-logger' version '2.0.0'
}

scmVersion {
    tag {
        prefix = 'javers'
    }
}

wrapper() {
    gradleVersion = '6.3'
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'de.marcphilipp.nexus-publish'
    apply plugin: 'com.adarshr.test-logger'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    project.group = 'org.javers'
    project.version = scmVersion.version

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation "org.spockframework:spock-core:$spockVersion"
        testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
        testImplementation 'org.apache.commons:commons-lang3:3.8.1'
        testImplementation 'ch.qos.logback:logback-classic:1.1.3'
        testImplementation 'cglib:cglib-nodep:3.2.0'
        testImplementation 'org.objenesis:objenesis:2.1'
        testImplementation 'org.easytesting:fest-assert-core:2.0M10'
    }

    javadoc {
        options.noTimestamp()
    }

    test {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }
    }

    task example(dependsOn: 'cleanTest') {
        doLast {
            tasks.test.testLogging {
                events 'failed', 'passed'
                showStandardStreams = true
            }
            tasks.test.execute()
        }
    }

    //disable javadoc doclint for Java8
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    //-- begin maven-publish.publish  spell --
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }
    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'JaVers Library'
                    description = 'JaVers - object auditing and diff framework for Java'
                    url = 'http://javers.org'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'javers'
                            name = 'JaVers Core Team'
                            email = 'javers@javers.org'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/javers/javers.git'
                        developerConnection = 'scm:git:https://github.com/javers/javers.git'
                        url = 'https://github.com/javers/javers'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username project.findProperty('nexusUsername') ?: 'secured'
                    password project.findProperty('nexusPassword') ?: 'secured'
                }
            }
        }
    }
    signing {
        sign publishing.publications
    }
    //-- eof maven-publish.publish spell --

    test {
        testLogging.exceptionFormat = 'full'
        testLogging.showStackTraces = true
    }

    //io.codearte.gradle
    nexusStaging {
        packageGroup = 'org.javers'
        numberOfRetries = 50
        delayBetweenRetriesInMillis = 5000
    }
    
    nexusPublishing {
        packageGroup = rootProject.nexusStaging.packageGroup
        stagingProfileId = rootProject.nexusStaging.stagingProfileId
        username = project.findProperty('nexusUsername') ?: 'secured'
        password = project.findProperty('nexusPassword') ?: 'secured'
    }
}

wrapper() {
    gradleVersion = '6.4.1'
}